#!/bin/bash
bxcommon_version="2025-01-05"
### collection of useful bash functions
### part of bashbox/buffermaker BashOS project

## copy-array
# A univeral function to copy both normal and associative arrays
function copy-array {
	local -n source="$1"
	local -n target="$2"
	target=()
	for idx in "${!source[@]}"; {
		target["${idx}"]="${source[${idx}]}"
	}
}
function copy-array.meta {
	_f_name="copy-array"
	_f_id="copy-array"
	_f_argn=2
	_f_arg1=2:in
	_f_arg2=2:out
}

function copy-array.check {
	local -a a=($RANDOM $RANDOM $RANDOM)
	unset "a[1]"
	local -a b=()
	copy-array a b
	((b[0]==a[0])) &&
		((b[1]==a[1])) &&
		((b[2]==a[2])) ||
			error "Function [bx_]copy-array[.check] validation check failed at numeric array"
	local -A c=([aa]=$RANDOM [a a]=$RANDOM [ a a]=$RANDOM)
	unset "c[a a]"
	local -A d
	copy-array c d
	((${d[aa]}==${c[aa]})) &&
		[ "${d[a a]}" = "${c[a a]}" ] &&
		((${d[ a a]}==${c[ a a]})) ||
			error "Function [bx_]copy-array[.check] validation check failed at associative array"
	_
	_check-pass "${_f_name}" "${_f_id}"
}

function _check-pass {
	printf '\e[32m%s (%s) passed function check\e[m' "$1" "$2"
}

function import-function {
	"$1.meta" || error "Function $1 has no metadata"
	copy-function "${_f_id}" "${_f_name}"
	copy-function "${_f_id}.meta" "${_f_name}.meta"
}

function validate {
	local -n source="$1"
	local target="$2"
	[ "$source" = "$target" ] || error "Function validation failed for property $1 of value $source, expected $target"
}

## append-array
# Append array \$1 to \$2  
function append-array {
	local -n source="$1"
	local -n target="$2"
	for idx in "${!source[@]}"; {
		target+=("${source[${idx}]}")
	}
}

function arg-copy {
	local -n target="$1"
	shift
	for ((i=1;i<=$#;i++)); do
		target[i]="${!i}"
	done
}

function arg-append {
	local -n target="$1"
	shift
	for ((i=1;i<=$#;i++)); do
		target+=("${!i}")
	done
}



function print-array {
	local -n source="$1"
	for idx in "${!source[@]}"; {
		echo "${source[idx]}"
	}
}

function copy-function {
	local -a fn
	local deffn="function $2"$'\n'
	mapfile fn <<<"$(declare -f "$1")"
	for ((i=1; i<${#fn[@]}; i++)) {
		deffn+="${fn[i]}"
	}
	eval "$deffn"
}

function count {
	for ((__bx_common_i=0; __bx_common_i<${1}; __bx_common_i++)) {
		echo "$__bx_common_i"
	}
}

## _ Variable refernce helper
function _ {
	# this function is here to simplify stuff as writing overlong variables indexed by overloong variable index...
	# ...is quite tiring <3
	[ -z "$1" ] && {
		for n in "${refalias[@]}"; do
			unset "$n"
		done
		unset refalias
		return
	}
	declare -gn "$1"="$2"
	refalias+=("$1")
}

## __ Swap variable references
function __ {
	# swap two references
	local -n _swap_1="$1"
	local _swap_copy_1="${!_swap_1}"
	local -n _swap_2="$2"
	local _swap_copy_2="${!_swap_2}"
	declare -gn "$1"="${_swap_copy_2}"
	declare -gn "$2"="${_swap_copy_1}"
}


## setface Convert colors to escape codes
# '$1' can be either one of colors:
#     black
#     red
#     green
#     yellow
#     blue
#     magenta
#     cyan
#     ligth-gray
#     gray
#     light-red
#     light-green
#     light-yellow
#     light-blue
#     light-magenta
#     light-cyan
#     white
# 'or hex. color (like "#bb2040")'
# 'or indexed 256 color with "c" as prefix (like c127)'
# 'for background color $mode has to be 48 and for foreground 38'
#
# If \$TERM \(current "$TERM"\) is \'linux\' \& option tty-linuxfb is 1 try to use true color even for tty
# Instead of normal '\e[$mode;r;g;bm' is used '\e]P$~1mode$Hexcode\e[$~2modem'
#     '$mode 38 → $~1mode 2 & $~2mode 32'
#     '$mode 48 → $~1mode 1 & $~2mode 41'
# Note that the linuxfb colors are very experimental and suffer from cursor implicitly overwriting them on movenment
function setface {
	[ -z "$1" ] && return
	case "$1" in
		black)      [ "$mode" = '38' ] && printf '\\e[30m' || printf '\\e[40m';;
		red)        [ "$mode" = '38' ] && printf '\\e[31m' || printf '\\e[41m';;
		green)      [ "$mode" = '38' ] && printf '\\e[32m' || printf '\\e[42m';;
		yellow)     [ "$mode" = '38' ] && printf '\\e[33m' || printf '\\e[43m';;
		blue)       [ "$mode" = '38' ] && printf '\\e[34m' || printf '\\e[44m';;
		magenta)    [ "$mode" = '38' ] && printf '\\e[35m' || printf '\\e[45m';;
		cyan)       [ "$mode" = '38' ] && printf '\\e[36m' || printf '\\e[46m';;
		light-gray) [ "$mode" = '38' ] && printf '\\e[37m' || printf '\\e[47m';;

		gray)          [ "$mode" = '38' ] && printf '\\e[90m' || printf '\\e[100m';;
		light-red)     [ "$mode" = '38' ] && printf '\\e[91m' || printf '\\e[101m';;
		light-green)   [ "$mode" = '38' ] && printf '\\e[92m' || printf '\\e[102m';;
		light-yellow)  [ "$mode" = '38' ] && printf '\\e[93m' || printf '\\e[103m';;
		light-blue)    [ "$mode" = '38' ] && printf '\\e[94m' || printf '\\e[104m';;
		light-magenta) [ "$mode" = '38' ] && printf '\\e[95m' || printf '\\e[105m';;
		light-cyan)    [ "$mode" = '38' ] && printf '\\e[96m' || printf '\\e[106m';;
		white)         [ "$mode" = '38' ] && printf '\\e[97m' || printf '\\e[107m';;
		*) case "${1::1}" in
			   '#')
				   if [ "$TERM" = 'linux' ] && ((options[tty-linuxfb])); then # Hack for linux framebuffer tty
					   case "$mode" in
						   38) printf '\\e]P2%s\\e[32m' "${1:1:6}" ;;
						   48) printf '\\e]P1%s\\e[41m' "${1:1:6}"
					   esac
				   else
					   local r="${1:1:2}"
					   local g="${1:3:2}"
					   local b="${1:5:2}"
					   printf '\\e[%d;2;%d;%d;%dm' "${mode}" $((16#$r)) $((16#$g)) $((16#$b))
				   fi;;
			   'c')
				   printf '\\e[%d;5;%dm' "${mode}" "${1:1}"
		   esac
	esac
	shift
	[ -n "$1" ] && "$@";
}

## :foreground
# Set foreground color.
# 'See <a> doc-goto setface : <f> link setface </f> </a> for more info.'
function :foreground { mode=38; setface "$@"; }

## :background
# Set background color.
# 'See <a> doc-goto setface : <f> link setface </f> </a> for more info.'
function :background { mode=48; setface "$@"; }

## :mode Sets text mode:
# '	inverse - inverses background and foreground'
function :mode {
	case "$1" in
		inverse) printf '\\e[7m';;
	esac
	shift
	[ -n "$1" ] && "$@";
}
	
## :weight Sets thickness of text:
#     bold
#     dim
#     normal
function :weight {
	case "$1" in
		bold) printf '\\e[1m';;
		dim) printf '\\e[2m';;
		normal) printf '\\e[m'
	esac
	shift
	[ -n "$1" ] && "$@";
}

## :slant Sets slant of text:
#     italic
#     normal
function :slant {
	case "$1" in
		italic) printf '\\e[3m';;
		normal) printf '\\e[m'
	esac
	shift
	[ -n "$1" ] && "$@";
}
function :underline {
	case "$1" in
		t) printf '\\e[4m';;
		nil) printf '\\e[m'
	esac
	shift
	[ -n "$1" ] && "$@";
}

function has-command {
	command -v "$1" >/dev/null 2>&1
}
function has-array-item {
	local -n source="$1" 
	local target="$2"
	local _has=no
	for idx in "${!source[@]}"; {
		[ "${source[idx]}" = "${target}" ] && _has=yes && return 0
	}
	return 1
}


function need-command {
	command -v "$1" >/dev/null 2>&1 || error "command ${1} not found"
}
function need-not-empty {
	local -n source="$1"
	[ -z "${source}" ] && error "variable ${1} is empty"
}
function need-not-empty-value {
	local source="$1"
	[ -z "${source}" ] && error "variable ${1} has empty value"
}
function need {
	#exit if var doesnt match expectation
	local -n source="$1"
	local target="$2"
	[ "${source}" = "${target}" ] || error "variable ${1} isn't expected ${2}"
}
function need-value {
	#exit if var doesnt match expectation
	local source="$1"
	local target="$2"
	[ "${source}" = "${target}" ] || error "variable ${1} doesn't have expected value ${2}"
}
function need-array-item {
	#exit if var doesnt match expectation
	local -n source="$1" 
	local target="$2"
	local _has=no
	for idx in "${!source[@]}"; {
		[ "${source[idx]}" = "${target}" ] && _has=yes && return
	}
	error "array ${1} doesn't have expected item with value ${2}"
}
function need-file {
	[ -f "${1}" ] || error "file ${1} doesn't exist"
}
function need-directory {
	[ -d "${1}" ] || error "directory ${1} doesn't exist"
}

function error {
	printf '\e[31;1m[error] \e[0;31m%s\e[m\n' "$@"
	exit 1
}

function __bxcommon-about {
	echo "version: ${bxcommon_version}"
}
function bxcommon-check {
	true
}

## base-name
# Basically equivalent to the "'basename'" coreutil		
function base-name {
	for file in "$@"; {
		file="${file%/}"
		printf '%s\n' "${file##*/}"
	}
}
				
[[ "${BASH_SOURCE[0]}" = "${0}" ]] && __bxcommon-about

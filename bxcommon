#!/bin/bash
bxcommon_version="0.2.2 I,II,"
### collection of useful bash functions
### part of bashbox/buffermaker BashOS project
function deprecated:replace { eval "function ${1} { warn \"${1} is deprecated, use ${2}\"; ${2}; }"; }

function is:command { command -v "$1" >/dev/null 2>&1; }
deprecated:replace has-command is:command
function is:dir { test -d "${1}"; }
function is:file { test -f "${1}"; }
function is:empty { test -z "${1}"; }
function is:function { declare -F "${1}" > /dev/null; }
function isnot:empty { test -n "${1}"; }
function ifnot:mkdir { is:dir "${1}" || mkdir "${1}"; }
function ifnot:touch { is:file "${1}" || touch "${1}"; }

function async-loop {
	is:command async-loop:block || error 'async-loop:block() not defined'
	for __async_arg in "${@}"; {
		async-loop:block "${__async_arg}" &
	}
	unset async-loop:block
}

function loop {
	is:command loop:block || error 'loop:block() not defined'
	__times="${1}"
	shift
	for ((i=0;i<=__times - 1;i++)); {
		loop:block "${@}" 
	}

	unset loop:block
}

function mk:case {
	declare  _c__name="$1"
	declare -a "${_c__name}"
	declare -n _c__target="${_c__name}"
	declare -i _c__i=0
	function + {
		_c__target+=("${1::-1}")
		declare -a "${_c__name}${1::-1}"
		declare -n _c__sub="${_c__name}${1::-1}"
		shift
		for _c__it in "$@"; do
			_c__sub+=("${_c__it}")
		done
		((_c__i++))
	}
	function }, {
		unset mk:case
		unset +
		unset },
	}
}


function need:command { is:command "$1" || error "command ${1} not found"; }
function need:function { declare -F "${1}" > /dev/null || error "function ${1} not defined"; }
deprecated:replace need-command need:command
function neednot:empty { [ -z "${1}" ] && error "variable ${1} is empty"; }
deprecated:replace need-not-empty neednot:empty
deprecated:replace need-not-empty-value neednot:empty

function need {
	#exit if var doesnt match expectation
	local -n source="$1"
	local target="$2"
	[ "${source}" = "${target}" ] || error "variable ${1} isn't expected ${2}"
}
function need-value {
	#exit if var doesnt match expectation
	local source="$1"
	local target="$2"
	[ "${source}" = "${target}" ] || error "variable ${1} doesn't have expected value ${2}"
}
function need-array-item {
	#exit if var doesnt match expectation
	local -n source="$1" 
	local target="$2"
	local _has=no
	for idx in "${!source[@]}"; {
		[ "${source[idx]}" = "${target}" ] && _has=yes && return
	}
	error "array ${1} doesn't have expected item with value ${2}"
}
function need-file {
	[ -f "${1}" ] || error "file ${1} doesn't exist"
}
function need-directory {
	[ -d "${1}" ] || error "directory ${1} doesn't exist"
}

function error {
	printf '\e[31;1m[error] \e[0;31m%s\e[m\n' "$@"
	exit 1
}
function warn {
	printf '\e[33;1m[warn] \e[0;33m%s\e[m\n' "$@"  >&2
}

## copy-array
# A univeral function to copy both normal and associative arrays
function copy-array {
	local -n source="$1"
	local -n target="$2"
	target=()
	for idx in "${!source[@]}"; {
		target["${idx}"]="${source[${idx}]}"
	}
}

function transform-array {
#	local function="${1:1:-1}"
	local -n source="${2}"
	local -n target="${3}"
	target=()
	for idx in "${!source[@]}"; {
		target["${idx}"]="$("${1}" "${source[${idx}]}")"
	}
}

function validate {
	local -n source="$1"
	local target="$2"
	[ "$source" = "$target" ] || error "Function validation failed for property $1 of value $source, expected $target"
}

## append-array
# Append array \$1 to \$2  
function append-array {
	local -n source="$1"
	local -n target="$2"
	for idx in "${!source[@]}"; {
		target+=("${source[${idx}]}")
	}
}

function arg-copy {
	local -n target="$1"
	shift
	for ((i=1;i<=$#;i++)); do
		target[i]="${!i}"
	done
}

function arg-append {
	local -n target="$1"
	shift
	for ((i=1;i<=$#;i++)); do
		target+=("${!i}")
	done
}

function print-array {
	local -n source="$1"
	for idx in "${!source[@]}"; {
		echo "${source[idx]}"
	}
}
function debug-array {
	local -n source="$1"
	for idx in "${!source[@]}"; {
		printf 'array(\e[1;32m%s\e[m) value(\e[1;35m%s\e[m)\n' "${1}" "${source[idx]}"
	}
}

function copy-function {
	local -a fn
	local deffn="function $2"$'\n'
	mapfile fn <<<"$(declare -f "$1")"
	for ((i=1; i<${#fn[@]}; i++)) {
		deffn+="${fn[i]}"
	}
	eval "$deffn"
}

function count {
	for ((__bx_common_i=0; __bx_common_i<${1}; __bx_common_i++)) {
		echo "$__bx_common_i"
	}
}

## _ Variable refernce helper
function _ {
	# this function is here to simplify stuff as writing overlong variables indexed by overloong variable index...
	# ...is quite tiring <3
	[ -z "$1" ] && {
		for n in "${refalias[@]}"; do
			unset "$n"
		done
		unset refalias
		return
	}
	declare -gn "$1"="$2"
	refalias+=("$1")
}

## __ Swap variable references
function __ {
	# swap two references
	local -n _swap_1="$1"
	local _swap_copy_1="${!_swap_1}"
	local -n _swap_2="$2"
	local _swap_copy_2="${!_swap_2}"
	declare -gn "$1"="${_swap_copy_2}"
	declare -gn "$2"="${_swap_copy_1}"
}


## setface Convert colors to escape codes
# '$1' can be either one of colors:
#     black
#     red
#     green
#     yellow
#     blue
#     magenta
#     cyan
#     ligth-gray
#     gray
#     light-red
#     light-green
#     light-yellow
#     light-blue
#     light-magenta
#     light-cyan
#     white
# 'or hex. color (like "#bb2040")'
# 'or indexed 256 color with "c" as prefix (like c127)'
# 'for background color $mode has to be 48 and for foreground 38'
#
# If \$TERM \(current "$TERM"\) is \'linux\' \& option tty-linuxfb is 1 try to use true color even for tty
# Instead of normal '\e[$mode;r;g;bm' is used '\e]P$~1mode$Hexcode\e[$~2modem'
#     '$mode 38 → $~1mode 2 & $~2mode 32'
#     '$mode 48 → $~1mode 1 & $~2mode 41'
# Note that the linuxfb colors are very experimental and suffer from cursor implicitly overwriting them on movenment
function setface {
	[ -z "$1" ] && return
	case "$1" in
		black)      [ "$mode" = '38' ] && printf '\\e[30m' || printf '\\e[40m';;
		red)        [ "$mode" = '38' ] && printf '\\e[31m' || printf '\\e[41m';;
		green)      [ "$mode" = '38' ] && printf '\\e[32m' || printf '\\e[42m';;
		yellow)     [ "$mode" = '38' ] && printf '\\e[33m' || printf '\\e[43m';;
		blue)       [ "$mode" = '38' ] && printf '\\e[34m' || printf '\\e[44m';;
		magenta)    [ "$mode" = '38' ] && printf '\\e[35m' || printf '\\e[45m';;
		cyan)       [ "$mode" = '38' ] && printf '\\e[36m' || printf '\\e[46m';;
		light-gray) [ "$mode" = '38' ] && printf '\\e[37m' || printf '\\e[47m';;

		gray)          [ "$mode" = '38' ] && printf '\\e[90m' || printf '\\e[100m';;
		light-red)     [ "$mode" = '38' ] && printf '\\e[91m' || printf '\\e[101m';;
		light-green)   [ "$mode" = '38' ] && printf '\\e[92m' || printf '\\e[102m';;
		light-yellow)  [ "$mode" = '38' ] && printf '\\e[93m' || printf '\\e[103m';;
		light-blue)    [ "$mode" = '38' ] && printf '\\e[94m' || printf '\\e[104m';;
		light-magenta) [ "$mode" = '38' ] && printf '\\e[95m' || printf '\\e[105m';;
		light-cyan)    [ "$mode" = '38' ] && printf '\\e[96m' || printf '\\e[106m';;
		white)         [ "$mode" = '38' ] && printf '\\e[97m' || printf '\\e[107m';;
		*) case "${1::1}" in
			   '#')
				   local r="${1:1:2}"
				   local g="${1:3:2}"
				   local b="${1:5:2}"
				   printf '\\e[%d;2;%d;%d;%dm' "${mode}" $((16#$r)) $((16#$g)) $((16#$b))
				   ;;
			   'c')
				   printf '\\e[%d;5;%dm' "${mode}" "${1:1}"
		   esac
	esac
	shift
	[ -n "$1" ] && "$@";
}

## :foreground
# Set foreground color.
# 'See <a> doc-goto setface : <f> link setface </f> </a> for more info.'
function :foreground { mode=38; setface "$@"; }

## :background
# Set background color.
# 'See <a> doc-goto setface : <f> link setface </f> </a> for more info.'
function :background { mode=48; setface "$@"; }

## :mode Sets text mode:
# '	inverse - inverses background and foreground'
function :mode {
	case "$1" in
		inverse) printf '\\e[7m';;
	esac
	shift
	[ -n "$1" ] && "$@";
}
	
## :weight Sets thickness of text:
#     bold
#     dim
#     normal
function :weight {
	case "$1" in
		bold) printf '\\e[1m';;
		dim) printf '\\e[2m';;
		normal) printf '\\e[m'
	esac
	shift
	[ -n "$1" ] && "$@";
}

## :slant Sets slant of text:
#     italic
#     normal
function :slant {
	case "$1" in
		italic) printf '\\e[3m';;
		normal) printf '\\e[m'
	esac
	shift
	[ -n "$1" ] && "$@";
}
function :underline {
	case "$1" in
		t) printf '\\e[4m';;
		nil) printf '\\e[m'
	esac
	shift
	[ -n "$1" ] && "$@";
}
function :reset {
	printf '\\e[m'
	[ -n "$1" ] && "$@";
}


function has-array-item {
	local -n source="$1" 
	local target="$2"
	local _has=no
	for idx in "${!source[@]}"; {
		[ "${source[idx]}" = "${target}" ] && _has=yes && return 0
	}
	return 1
}




function __bxcommon-about {
	echo "version: ${bxcommon_version}"
	declare -F
}
function bxcommon-check {
	true
}

## list-directory
# Basically like ls command 
function list-directory {
	((options[display-dotfiles]==1)) && shopt -s dotglob
	((options[display-dotfiles]==0)) && shopt -u dotglob
	printf '..\n'
	printf '%s\n' *
}

## base-name
# Basically equivalent to the "'basename'" coreutil		
function base-name {
	for file in "$@"; {
		file="${file%/}"
		printf '%s\n' "${file##*/}"
	}
}
function dir-name {
	for file in "$@"; do
		# Usage: dirname "path"
		tmp=${file:-.}
		
		tmp=${tmp%%"${tmp##*[!/]}"}
		
		[[ ${tmp##*/*} ]] && tmp=.
		
		tmp=${tmp%/*}
		tmp=${tmp%%"${tmp##*[!/]}"}
		
		printf '%s\n' "${tmp:-/}"
done
}
## current-time
# Basically like coreutil "'date'"
function current-time { printf "%($1)T\\n"; }
function current-time.epoch { printf "%(%s)T\\n"; }

# function ext {
# 	declare -ng __ext_name="$1"
# 	declare -g __ext_num="$2"
# 	declare -g __ext_id=0

# 	[ -z "$2" ] && {
# 		__ext_name+=('')
# 		__ext_num='-1'
# 	}

# 	function , {
# 		if ((__ext_id==0)); then
# 			__ext_name[-1]+="$*"
# 			__ext_id=1
# 		else
# 			__ext_name[-1]+=" $*"
# 		fi
# 	}
# }

function block {
	[ "$2" = '{' ] || exit 1
	declare -ng __ext_name="$1"
	declare -g __ext_id=0
	declare -ag __ext_type
	__ext_type[0]='none'
	__ext_type[1]='newline'
	set +e
#	PATHbak="$PATH"
#	PATH=''
#	trap 'eval "+ $BASH_COMMAND"' ERR

	function + {
		case "${__ext_type[-1]}" in
			'newline') __data-new "$1";;
			'oneline') __data-add "$1";;
			*) : ;;
		esac
	}
	
	function line {
		__ext_id=0
		__ext_num='-1'
		__ext_name+=('')
		__ext_type+=('oneline')
	}
	
	function __data-add {
		if ((__ext_id==0)); then
			__ext_name[-1]+="$*"
			__ext_id=1
		else
			__ext_name[-1]+=" $*"
		fi
	}
	function __data-new {
		__ext_name+=("$*")
	}
	function }, {
		unset '__ext_type[-1]'
#		[ ! "${__ext_type[-1]}" = 'none' ] && {
#			PATH="$PATHbak"
#		}
	}
}

:

get:cursor() {
    IFS='[;' read -p $'\e[6n' -d R -rs _ y x _
    printf '%s\n' "$y $x"
}

function output {
	[ -z "${output}" ] && output='echo -E'
	case  "${output:0:5}" in
		'echo '|'echo')
			local flags="${output: 5}"
			echo "${flags:--E}" "$@"
			return;;
		*)
			local -n target="${output}"
			target="$@"
			;;
	esac
}

#############################################################################################LAYER II
function bx:common:II {
function bx:common:II:grep {
	PATTERN="$1"
	shift
	IFS=$'\n'
	INPUT=-
	exec 3<&0
	while read -ru 3 line; do
		[[ "$line" =~ .*$PATTERN.* ]] && echo -E "$line"
	done
}
function bx:common:II:count-lines {
	local -a i
	mapfile -t i
	output "${#i[@]}"
}
}

[[ "${BASH_SOURCE[0]}" = "${0}" ]] && __bxcommon-about

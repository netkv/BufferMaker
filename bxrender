#!/bin/bash
bxrender_version="0.11.8"
##############################################################################################RENDER
# invalidate redraw cache for entire buffer
function refresh {
	clear-screen
	bf_s=''
	redraw
}
function mark-render-area {
	for ((i=${1}; i<${2} ; i++)); do
		unset bf_s[i]
	done
}
function make-render-area { mark-render-area "$@"; }

## make-render-line
# Syntax highlights single line '$1'
# Defaults to currently selected line if no argument is passed
function make-render-line {
	local -i line=${1:-bf_d[line]}
	local -n linearray="${current_buffer}_syntax${line}"
	bf_s[line]="${current_buffer}_syntax${line}"
	linearray=()
	
	local -i comment=0 skip_next_space=0
	local word=''
	bf_e[line]=''
	for _link in ${bf_c[line]}; do unset "$_link"; done; unset bf_c[line] # clear command buffer
	column=0
	
	bckeIFS="${IFS}"
	IFS=''
	case "${bf_d[bxrender-function]}" in
		'syntax1')
			case "${bf_d[render-type]}" in
				'per-char') make-render-line-loop-char;;
				'per-word') make-render-line-loop-word;;
				'per-line') make-render-line-loop-line;;
				*) make-render-line-loop-char
			esac;;
		*)
			"${bf_d[bxrender-function]}";;
	esac
	IFS="$bckeIFS"
}
function make-render-line-loop-line {
	IFS=' '
	while read -rs word; do
		IFS=''
		syntax-word
		IFS=' '
	done  <<< "${buffer[line]}"
}

function make-render-line-loop-word {
	IFS=' '
	newline=1
	while read -rs -d' ' word; do
		IFS=''
		syntax-word
		newline=0
		((skip_next_space==1)) && skip_next_space=0 && continue
		bf_e[line]+='s'
	    linearray+=("${faces_raw[reset]}${faces_raw[${facename:-${bf_d[background]:-default}}]} ")
		((column++))
		
		IFS=' '
	done  <<< "${buffer[line]}"
}


## make-render-line-loop
# Also creates bf_e charmap for movenment
#     "Tab is 't'"
#     "Space is 's'"
#     "Any unmaped char is '0'"
function make-render-line-loop-char {
	while read -rsn1 char; do
		[ "$char" = ' ' ] && {
			syntax-word
			word=''
			((skip_next_space==1)) && skip_next_space=0 && continue
			bf_e[line]+=s
			linearray+=(
				"${faces_raw[reset]}${faces_raw[${facename:-${bf_d[background]:-default}}]} "
			)
			((column++))
			continue
		}
		[ "$char" = '	' ] && {
			syntax-word
			word=''
			printf -v _bxrd__z '%*s' "${#resources[tab]}" ''
			bf_e[line]+="${_bxrd__z// /t}"
			face-no-expand tab-face #"${resources[tab]}"
			((column+=${#resources[tab]}))
			continue
		}
		[ "$char" = '' ] && {
			syntax-word
			word=''
			skip_next_space=0
			face-no-expand "${bf_d[background]:-default}" ''
			newline=1 # tell syntax functions that the previous char was newline
			return
		}
		word+="${char}"
	done  <<< "${buffer[line]}"
}

## syntax-word
# Decides what a word should highlighted as
function syntax-word {
	"${bf_d[syntax]}"
	((bf_d[syntax-exec])) || face "$syntax_face" "$word" # s_ex controls syntax extended
}

## face
# Add highlighted word to multidimensional nonsense "'bf_s'" arry
function face {
	[[ "$2" =~ ${2//?/(.)} ]]
	linearray+=("${faces_raw[reset]}${faces_raw[${1}]}${BASH_REMATCH[@]:1}")
	printf -v _bxrd__z '%*s' "${#2}" ''
    bf_e[line]+="${_bxrd__z// /0}"
}
## face-no-expand
# Add highlighted word to multidimensional nonsense "'bf_s'" arry without adding anything to bf_e[] array
function face-no-expand {
	[[ "$2" =~ ${2//?/(.)} ]]
	linearray+=("${faces_raw[reset]}${faces_raw[${1}]}${BASH_REMATCH[@]:1}")
}

## set-face Sets face for syntax highlighting
function set-face { syntax_face="${1}"; }

# reset buffer rendered caches
function clear-render {
	bf_e=()
	for l in "${bf_s[@]}"; { unset "$l"; }; bf_s=()
	for l in "${bf_c[@]}"; { unset "$l"; }; bf_c=()
}
function syntax-none { set-face "${bf_d[background]:-default}"; }
##############################################################################################REDRAW
# Redraw popup menu
function redraw.menu {
	local -i y=${bf_d[menu_y]:-$((bf_d[line] + bf_d[loc-y] -1))}
	local -i x=${bf_d[menu_x]:-$((bf_d[column] + bf_d[loc-x] -1))}
	printf '\e[?25l' # hide cursor (again)
	printf '\e[%s;0H' $y #$menuloc_y
	for i in "${!menu_0[@]}"; {
		if ((i == menuselection)); then
			printf "\e[%sC%b%s${reset}\n" $x "${faces[menu-selected]}${faces_raw[${menu_2[i]:-menu-selected}]}" "${menu_0[i]}"
		else
			printf "\e[%sC%b%s${reset}\n" $x "${faces[menu-enabled]}${faces_raw[${menu_2[i]:-menu-enabled}]}" "${menu_0[i]}"
		fi
	}
}

function redraw {
	@hook begin && return
	redraw.content
	redraw.cursor
}

function redraw.content {
	printf '\e[?25l'
	unset buffer[0]
#	((bf_d[column] +3 < bf_d[size-x] - bf_d[number-length] - 1)) &&
#		bf_d[basecolumn]=0
#	((bf_d[column] +3 > bf_d[size-x] - bf_d[number-length] - 1)) &&
#		bf_d[basecolumn]=$((bf_d[column] - (bf_d[size-x] + bf_d[loc-x] - bf_d[number-length] - 1) +3))
	printf "\e[%s;%sH" "${bf_d[loc-y]}" "${bf_d[loc-x]}"
	IFS='' #has to be empty in order to bufferarray multiarray be printed as words instead of chars
	# Iterate over shown lines
	local -i max=$((bf_d[size-y]))
	for ((i = bf_d[base]; i - bf_d[base] < max; i++)); do
		((i > ${#buffer[@]})) && {
			printf '%b\e[%d;%dH%*s' "${faces[${bf_d[background]:-default}]}"\
				   $((bf_d[loc-y]+i-1)) "${bf_d[loc-x]}"\
				   $((bf_d[size-x] - bf_d[number-length])) '' &&
				continue
		}
		# If the requested line isn't rendered, render it
		[ -z "${bf_s[base+i]}" ] && make-render-line $((base + i))
#		IFS='Â¸' # debug method
		local -n linearray="${bf_s[i]}"
		((i - bf_d[base] > max - 2)) && nlchar='' || nlchar='\n' #nlchar='\e[7m---More---\e[m'
		printf "\e[%dG%b%*s\e[%sG%b%s\e[m%b"\
			   "${bf_d[loc-x]}"\
			   "${faces[${bf_d[background]:-default}]}"\
			   ${bf_d[size-x]}\
			   ''\
			   ${bf_d[loc-x]}\
			   "${faces[${bf_d[background]:-default}]}"\
			   "${linearray[*]:bf_d[basecolumn]:bf_d[size-x] - (bf_d[number-length])}"\
			   "$nlchar"
	done

	@ifs
	# redraw menu if open
	[ "${bf_d[mode]}" = 'menu' ] && redraw.menu
}
## print-buffer-line
function print-buffer-line { # why this errors when stderr is redirected
	IFS=''
	local -n linearray="${bf_s[bf_d[line]]}"
	printf '%s' "${linearray[*]:bf_d[basecolumn]:bf_d[size-x] - (bf_d[number-length])}"
	@ifs
}
# Draw cursor on the line
function redraw-line.cursor {
	# redraw if buffer needs to be moved horizontally
	((bf_d[column] > bf_d[size-x] - bf_d[number-length] - space)) && { redraw; return; }
	((bf_d[basecolumn]==0)) || { redraw; return; }
	printf '\e[%sG\e[?25h' $((
	    bf_d[column] - bf_d[basecolumn] + bf_d[number-length] + bf_d[loc-x] + bf_d[number-space]
    )) || redraw
}	
# Draw cursor and if move_base is 1 redraw
function redraw.cursor {
	@hook first && return
	((move_base)) && {
		move_base=0
		redraw
		return
	}
	local -i y=$((bf_d[line] + options[menu-line] - bf_d[base] + bf_d[loc-y]))
	@hook pre-redraw
	printf '\e[%s;%sH\e[?25h'\
		   $y\
		   $((bf_d[column] - bf_d[basecolumn] + bf_d[number-length] + bf_d[loc-x] + bf_d[number-space]))
	last_line=${bf_d[line]}
	@hook post-redraw
}

function cursor.hide { printf '\e[?25l'; }
function cursor.show { printf '\e[?25h'; }

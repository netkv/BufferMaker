#!/bin/bash
source buffermaker
## Example of buffermaker tui program

add-mode testui
	:: '[left]' format-left
	:: '[up]' format-up
	:: '[right]' format-right
	:: '[down]' format-down
	:: RET link-enter
	:: C-c die
	:: "$(kbd k)" previous-line
	:: "$(kbd j)" next-line
	:: "$(kbd l)" forward-char
	:: "$(kbd h)" backward-char
	:: "$(kbd d)" dmp
	mode-options
		:: else :

declare-buffer counter
bf_d+=(
	[line]=5
	[column]=0
	[info]="Testui"
	[mode]=testui
	[filetype]='format'
	[syntax]=syntax-format
	[syntax-exec]=1
	[render-type]=per-char
)


function dmp {
	declare -p "${!bf_s}" > d
	echo >> d
	for idx in "${bf_s[@]}"; do
		echo
		declare -p "${idx}" >> d
	done
	die
}
function inc {
	((incnum++))
	make-render-line 3
	redraw
}

function dec {
	((incnum--))
	make-render-line 3
	redraw
}

function show-more {
	buffer[7]="${buffer[6]}"
	buffer[6]='More: '\
'<o> id: setnum select: set-number redraw right: obj menu left: : up: show-less down: show-less '\
'text: <f> link Set number </f> '\
'</o> '\
'<o> id: menu select: menu zero right: obj close left: obj setnum up: show-less down: show-less '\
'text: <f> menu menu </f> '\
'</o> '\
'<o> id: close select: show-less left: obj menu right: : up: show-less down: show-less '\
'text: <f> light-red x </f> '\
'</o>'
	mark-render-area 6 7
	redraw
	obj close
}
function show-less {
	buffer[6]="${buffer[7]}"
	unset buffer[7]
	mark-render-area 6 7
	redraw
	obj more
}

incnum=0

zero=(
	text: Menu
		face: menu-highlight
	text: Zero
		cmd: number-set 0
	text: One
		cmd: number-set 1
	text: Ten
		cmd: number-set 10
	text: Hundred
		cmd: number-set 100
	text: Thousand
		cmd: number-set 1000
	text: Million
		cmd: number-set 1000000
		face: menu-divider
	text: Close
		cmd: menu.exit
	text: Quit
		cmd: die
)
menu.add zero


function number-set {
	menu.exit
	incnum="$1"
	make-render-line 3
	redraw
}
	
block buffer {
	+ ''
	+ '<f> divider <lp> &line x/2-s/2 <h> Super number counter </h> </lp> <> <lp> &line x/2-s[-2]/2 </lp> </f>'
	+ ''
	+ '<-> <f> highlight &bold-line <v> incnum &bold-line </f>'
	+ ''
	# controls
	line {
		+ '<o> id: inc select: inc redraw right: obj dec left: : up: : down: obj quit'
		+ 'text: <f> link Increase </f>'
		+ '</o>'
		+ '<o> id: dec select: dec left: obj inc right: obj more up: : down: obj next'
		+ 'text: <f> link Decrease </f>'
		+ '</o>'
		+ '<o> id: more select: show-more left: obj dec right: : up: : down: obj next'
		+ 'text: <f> title ... </f>'
		+ '</o>'
	},
	# quit button
	line {
		+ '<o> id: quit select: switch-buffer main right: obj next left: : down: : up: obj inc text: <f> red Quit </f> </o>'
		+ '<o> id: next select: next-test right: : left: obj quit down: : up: obj dec text: <f> link Next </f> </o>'
	},
},

################################################################################
#                              Format section                                  #
################################################################################
version_lenght=${#buffermaker_version}
function next-test {
	set-buffer formats
	redraw
}
declare-buffer formats
bf_d+=(
	[line]=1
	[column]=0
	[mode]=testui
	[syntax]=syntax-format
	[syntax-exec]=1
	[render-type]=per-char
)
block buffer {
	+ ''
	line {
		+ '<lp> - 0'
		+ '<o> id: previous select: previous-test text: <f> link Previous </f> </o> </lp> <>'
		+ '<f> divider <lp> &line x/2-s/2-s[-2] <h> Formating </h> </lp> <>'
		+ '<lp> &line x/2-s[-2]/2-version_lenght+2 </lp> <>'
		+ '<f> hint <v> buffermaker_version </f> </f>'
	},
	+ '<o> id: next select: next-multi text: <f> link Next test </f> </o>'
	+ "<-> This is a showcase of Buffermaker's integrated formating language."
	+ ''
	+ '<-> <\> <lp> (left-pad), <\> <f> (face), <\> <h> (header), <\> <> (delete-last), <\> (escape) showcase:'
	+ ''
	+ '<f> divider &angle-down-right <> <lp> &line 16*6 </lp> <> &angle-down-left </f>'
	line {
		+ '<f> divider &column </f> <lp> &space 0 <h> pseudo-Table </h> </lp> <>'
		+ '<lp> &space 16*6-s[-2] <f> divider &column </f> </lp>'
	},
	+ '<f> divider &column <> <lp> &space 16*6 &column </lp> </f>'
	line {
		+ '<f> divider &column </f> <f> title'
		+ '<lp> &space 0 id </lp>'
		+ '<lp> &space 16-s[-2] number </lp>'
		+ '<lp> &space 16-s[-2] amount </lp>'
		+ '<lp> &space 16-s[-2] cost </lp>'
		+ '<lp> &space 16-s[-2] date </lp>'
		+ '<> <lp> &space 32-s[-2] <f> divider &column </f> </lp>'
		+ '</f>'
	},
	for i in {0..16}; do
		line {
			+ "<f> divider &column </f> <lp> &space 0 $RANDOM <f> dim random </f> </lp>"
			+ "<lp> &space 16-s[-2] $RANDOM </lp>"
			+ "<lp> &space 16-s[-2] ${RANDOM}% </lp>"
			+ "<lp> &space 16-s[-2] \$$RANDOM </lp>"
			+ "<lp> &space 16-s[-2] $RANDOM/$RANDOM/$RANDOM </lp>"
			+ '<> <lp> &space 32-s[-2] <f> divider &column </f> </lp>'
		},
	done
	+ '<f> divider &angle-up-right <> <lp> &line 16*6 &angle-up-left </lp> </f>'
	+ ''
	+ '<hr>'
	+ '<h> Unordered list </h> <indent> &tab'
	+ '<f> red <li> Red </f>'
	+ '<f> yellow <li> Yellow </f>'
	+ '<f> green <li> Green </f>'
	+ '<f> cyan <li> Cyan </f>'
	+ '<f> blue <li> Blue </f>'
	+ '<f> magenta <li> Magenta </f>'

	line {
		+ '<f> light-red <li> </f>'
		+ '<f> light-yellow L </f> <> <f> light-green i </f> <> <f> light-cyan g </f> <> <f> light-blue h </f> <> <f> light-magenta t </f>'
		+ '<f> light-red r </f> <> <f> light-yellow a </f> <> <f> light-green i </f> <> <f> light-cyan n </f> <>'
		+ '<f> light-blue b </f> <> <f> light-magenta o </f> <> <f> light-red w </f>'
	},
	+ '</indent>'
	+ ''
	+ '<h> Ordered list </h> <indent> &tab <ol>'
	+ '<li> Potatoes'
	+ '<li> Beef'
	+ '<li> Pork'
	+ '<li> Vodka'
	+ '<li> Salad'
	+ '<li> Milk'
	+ '<li> Ice cream'
	+ '</ol> </indent> <> <hr>'
	+ '<f> red <lp> &space x/6 </lp> <> &bold-angle-down-right <> <lp> &bold-line x/3*2 </lp> <> &bold-angle-down-left </f>'
	line {
		+ '<f> red <lp> &space x/6 </lp> <> &bold-column </f> <lp> &space 0 <h> Boxes </h> </lp> <>'
		+ '<lp> &space x/3*2-s[-2] <f> red &bold-column </lp> </f>'
	},
	line {
		+ '<f> red <lp> &space x/6 </lp> <> &bold-column </f> <lp> &space 0 * Text1 </lp> <>'
		+ '<lp> &space x/3*2-s[-2] <f> red &bold-column </lp> </f>'
	},
	line {
		+ '<f> red <lp> &space x/6 </lp> <> &bold-column </f> <lp> &space 0 * Text2 </lp> <>'
		+ '<lp> &space x/3*2-s[-2] <f> red &bold-column </lp> </f>'
	},
	line {
		+ '<f> red <lp> &space x/6 </lp> <> &bold-column </f> <lp> &space 0 * Text3 </lp> <>'
		+ '<lp> &space x/3*2-s[-2] <f> red &bold-column </lp> </f>'
	},
	+ '<f> red <lp> &space x/6 </lp> <> &bold-angle-up-right <> <lp> &bold-line x/3*2 </lp> <> &bold-angle-up-left </f>'
	+ ''
	+ '<hr>'
	+ '<h> Links </h>'
	+ ''
	+ '<tab> <link> die : Quit </link> (using <\> <link>)'
	+ '<tab> <a> die : <f> hint Quit </f> </a> (using <\> <a>)'
	+ '<tab> <o> id: testlink select: die text: <f> highlight Quit </f> </o> (using <\> <o>)'
	+ '<f> divider <hr> </f>'
	+ '<h> Basic format </h>'
	+ '<indent> &tab'
	+ '<b> bold </b>'
	+ '<strong> strong </strong>'
	+ '<i> italic </strong> </indent>'
	+ ''
	+ '<hr>'
	+ '<h> Checkboxes </h>'
	+ ''
	+ '<-> <ch> test0 </ch> name0 (variable: <v> test0 <> )'
	+ '<-> <ch> test1 </ch> name1 (variable: <v> test1 <> )'
	+ '<-> <ch> test2 </ch> name2 (variable: <v> test2 <> )'
	+ '<-> <ch> test3 </ch> name3 (variable: <v> test3 <> )'
	+ '<-> <ch> test4 </ch> name4 (variable: <v> test4 <> )'
	+ '<-> <ch> test5 </ch> name5 (variable: <v> test5 <> )'
	+ '<-> <ch> test6 </ch> name6 (variable: <v> test6 <> )'
	+ '<-> <ch> test7 </ch> name7 (variable: <v> test7 <> )'
	+ '<-> <ch> test8 </ch> name8 (variable: <v> test8 <> )'
	+ '<-> <ch> test9 </ch> name9 (variable: <v> test9 <> )'
	+ ''
},
#source ./fmtcache
function previous-test {
	set-buffer counter
	redraw
}
################################################################################

declare-buffer builtin
bf_d+=(
	[line]=1
	[column]=0
	[mode]=testui
	[syntax]=syntax-format
	[syntax-exec]=1
	[render-type]=per-char
)
buffer=(
	''
	'<h1> Builtin Buffers </h1>'
	''
	'<o> id: msgbox select: msgbox-test text: <f> button Msgbox </f> </o>'
	'<o> id: dialogbox select: dialogbox-test text: <f> button Dialogbox </f> </o>'
	'<-> <f> hint dialogbox-output </f>'
)
function msgbox-test {
	local -a test_msgbox
	local test_msgbox_title
	
	test_msgbox_title='Title'
	test_msgbox=(
		'<f> red A very serious error!!! </f>'
		'<f> yellow But it might be just fine </f>'
		"don't worry"
	)
	msgbox test_msgbox
}

function dialogbox-test {
	local test_dialogbox_title='Question?'
	local -a test_dialogbox=(
		'<f> blue Would you like to buffer? </f>'
		"<f> hint it's fine to buffer </f>"
		'and now choose...'
	)
	dialogbox test_dialogbox
}
function test_dialogbox.yes {
	box.close
	buffer[5]='<-> <f> highlight YES </f>'
	make-render-line 5
	redraw
}
function test_dialogbox.no {
	box.close
	buffer[5]='<-> <f> highlight NO </f>'
	make-render-line 5
	redraw
}



################################################################################
#                          Multi buffer example                                #
################################################################################
function next-multi {
	set-buffer mbackground
	redraw
	set-buffer mlist_title
	redraw
	set-buffer mlist
	redraw
}
declare-buffer mbackground
bf_d+=(
	[line]=1
	[column]=0
	[mode]=testui
	[syntax]=syntax-format
	[syntax-exec]=1
	[render-type]=per-char
)
buffer=(
''
'<f> hint <lp> &space x/2-s/2 Multi buffer test </lp> </f>'
)
declare-buffer mlist_title
bf_d+=(
	[loc-y]=4
	[loc-x]=4
	[size-x]=$((COLUMNS/2-8))
	[size-y]=$((LINES/2-8))
	[line]=1
	[column]=0
	[mode]=testui
	[background]=background-highlight
	[syntax]=syntax-format
	[syntax-exec]=1
	[render-type]=per-char
)
buffer=(
''
'<f> <v> bf_d[background] <lp> &space x/2-s/2 Multi buffer test </lp> </f>'
)
declare-buffer mlist
bf_d+=(
	[loc-y]=5
	[loc-x]=4
	[size-x]=$((COLUMNS/2-8))
	[size-y]=$((LINES/2-9))
	[line]=1
	[column]=0
	[mode]=testui
	[syntax]=syntax-format
	[syntax-exec]=1
	[render-type]=per-char
)
buffer=(
	''
	''
	'item1'
	'item2'
	'item3'
)


################################################################################
#                          Final rendering                                     #
################################################################################
declare-buffer main
bf_d+=(
	[line]=4
	[column]=6
	[mode]=testui
	[syntax]=syntax-format
	[syntax-exec]=1
	[render-type]=per-char
)

format-build buffer {
	newline 1,
	title {
		level=1
		label=Buffermaker
	},
	subtitle {
		label="Program example && reference",
	},
	title {
		label=Demos
	},
	+ '<-> <li> <link> switch-buffer counter : Test program </link>'
	+ '<-> <li> <link> switch-buffer formats : Format </link>'
	+ '<-> <li> <link> switch-buffer builtin : Builtin buffers </link>'
	+ '<-> <li> <link> next-multi : Multi buffer </link>'
	newline 1,
	title {
		label='More Ebashs programs'
	},
	+ '<-> <li> <link> xdg-open https://github.com/aeknt/bffm : Bffm </link>'
	+ '<-> <li> <link> xdg-open https://github.com/aeknt/ebashs : Ebashs </link> (will probably be outdated)'
	newline 1,
	title {
		label=More
	},
	+ '<-> <li> <link> buffermaker : About BufferMaker </link> '
}, 

stty -echo
hooks[die]='stty echo'

set-buffer main
load-default-config
init-var
redraw
obj next
#source bfmkdbg
input-loop
